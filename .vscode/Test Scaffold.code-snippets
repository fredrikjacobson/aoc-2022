{
  // Place your aoc-2022 workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  // Example:
  // "Print to console": {
  // 	"scope": "javascript,typescript",
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }
  "Test Scaffold": {
    "scope": "rust",
    "prefix": "day",
    "body": [
      "use std::{collections::HashSet, hash::Hash, str::FromStr};",
      "",
      "use crate::helper::{read_lines, ParseError};",
      "",
      "#[test]",
      "pub fn test_day${TM_FILENAME/day(.*)\\..+$/$1/}_pt_1() {",
      "  let lines: Vec<String> = read_lines(${TM_FILENAME/day(.*)\\..+$/$1/}, false);",
      "  println!(\"Part1 score is {:?}\", 0);",
      "  assert!(false);",
      "}",
      "#[test]",
      "pub fn test_day${TM_FILENAME/day(.*)\\..+$/$1/}_pt_2() {",
      "  let lines: Vec<String> = read_lines(${TM_FILENAME/day(.*)\\..+$/$1/}, false);",
      "  println!(\"Part1 score is {:?}\", 0);",
      "  assert!(false);",
      "}"
    ]
  }
}
